{"version":3,"sources":["Form.js","DataTable.js","Title.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","type","causeUpdate","UnitForm","Grid","item","xs","TextField","name","id","label","variant","createBody","a","$","selector","document","querySelector","body","fname","value","lname","afm","job","depId","fetch","then","res","json","department","err","console","log","title","clearForm","classList","remove","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","onloadend","FormButton","Button","onClick","handleSubmit","content","FormMain","className","noValidate","autoComplete","text","container","DataTable","data","d","guessType","keys","idIndex","Object","indexOf","splice","primaryIndex","selectPrimaryKey","getTrimmedKeys","capitalize","string","charAt","toUpperCase","slice","HeaderCell","TableCell","Box","fontWeight","TableHeader","unshift","TableHead","TableRow","map","key","DepartmentCell","component","scope","entry","TableForms","md","TableMain","departmentIndex","TableBody","align","direction","alignItems","TableContainer","Paper","Table","aria-label","Title","fontSize","Navbar","AppBar","position","Toolbar","IconButton","edge","color","Typography","href","setRequestType","App","useState","setData","requestType","dirty","setDirty","t","useEffect","updateData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fbb974c2.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport './Form.css';\n\n\nexport default function Form(props) {\n    let type = props.type;\n    let causeUpdate = props.causeUpdate;\n\n    function UnitForm(props) {\n        return (\n            <Grid item xs={2}>\n                <TextField name={props.id} id={props.id} label={props.label} variant=\"outlined\" />\n            </Grid>\n        );\n    }\n\n    async function createBody(type) {\n        let $ = (selector) => document.querySelector(selector);\n\n        let body = {};\n        if (type === \"employee\") {\n            body.fname = $(\"#fname\").value;\n            body.lname = $(\"#lname\").value;\n            body.afm = $(\"#afm\").value;\n            body.job = $(\"#job\").value;\n            let depId = $(\"#depId\").value;\n            if (depId) {\n                await fetch(\"/api/department/\" + depId)\n                    .then((res) => res.json())\n                    .then((res) => {\n                        body.department = res;\n                    },\n                        (err) => console.log(err));\n            }\n        } else if (type === \"department\") {\n            body.title = $(\"#title\").value;\n        }\n        return body;\n    }\n\n    function clearForm(type) {\n        let $ = (selector) => document.querySelector(selector);\n        if (type === \"employee\") {\n            $(\"#fname\").value = \"\";\n            $(\"#fname-label\").classList.remove(\"MuiInputLabel-shrink\");\n            $(\"#lname\").value = \"\";\n            $(\"#lname-label\").classList.remove(\"MuiInputLabel-shrink\");\n            $(\"#afm\").value = \"\";\n            $(\"#afm-label\").classList.remove(\"MuiInputLabel-shrink\");\n            $(\"#job\").value = \"\";\n            $(\"#job-label\").classList.remove(\"MuiInputLabel-shrink\");\n            $(\"#depId\").value = \"\";\n            $(\"#depId-label\").classList.remove(\"MuiInputLabel-shrink\");\n        } else if (type === \"department\") {\n            $(\"#title\").value = \"\";\n            $(\"#title-label\").classList.remove(\"MuiInputLabel-shrink\");\n        }\n    }\n\n    async function handleSubmit(type) {\n        let body = await createBody(type);\n        clearForm(type);\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", \"/api/\" + type, true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify(body));\n        xhr.onloadend = causeUpdate; //need to update the page with new data\n    }\n\n    function FormButton(props) {\n        return (\n            <Grid item xs={2}>\n                <Button onClick={() => { handleSubmit(props.type); }} variant=\"contained\">{props.content}</Button>\n            </Grid>\n        );\n    }\n\n    function FormMain(props) {\n        if (props.type === \"department\") {\n            return (\n                <>\n                    <UnitForm id=\"title\" label=\"Title\" />\n                </>\n            );\n        } else if (props.type === \"employee\") {\n            return (\n                <>\n                    <UnitForm id=\"fname\" label=\"First Name\" />\n                    <UnitForm id=\"lname\" label=\"Last Name\" />\n                    <UnitForm id=\"afm\" label=\"AFM\" />\n                    <UnitForm id=\"job\" label=\"Job\" />\n                    <UnitForm id=\"depId\" label=\"Department ID\" />\n                </>\n            );\n        }\n    }\n\n    return (\n        <div className=\"Form\">\n            <form id={type} noValidate autoComplete=\"off\">\n                <p>{props.text}</p>\n                <Grid container>\n                    <FormMain type={type} />\n                    <FormButton type={type} content={\"SAVE\"} />\n                </Grid>\n            </form >\n        </div>\n    );\n}\n\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Grid, Box } from '@material-ui/core';\nimport './DataTable.css';\nimport Form from './Form.js';\n\nexport default function DataTable(props) {\n    const data = props.data; //array of objects of type type\n    const type = guessType(data); //either employee or department\n    let keys = getTrimmedKeys(data, type);\n    let causeUpdate = props.causeUpdate;\n\n    function capitalize(string) { //capitalize the first letter of a string\n        if (string) {\n            if (typeof string !== \"number\") {\n                return string.charAt(0).toUpperCase() + string.slice(1);\n            } else {\n                return string;\n            }\n        }\n    }\n\n    function HeaderCell(props) {//everything here is bolded with a box\n        return (\n            <TableCell>\n                <Box fontWeight=\"fontWeightBold\">\n                    {capitalize(props.content)}\n                </Box>\n            </TableCell>\n        );\n    }\n\n    function TableHeader(props) {\n        let keys = props.keys;\n        let type = props.type;\n        if (type === \"department\") keys.unshift(\"id\");\n\n        return (\n            <TableHead>\n                <TableRow>\n                    {/* the first cell is the type of each entry */}\n                    <HeaderCell content={type} />\n                    { //the rest are the keys of the properties\n                        keys.map((key) =>\n                            <HeaderCell content={key} />\n                        )\n                    }\n                </TableRow>\n            </TableHead>\n        );\n    }\n\n    function selectPrimaryKey(type) { //returns the KEY of the primary property of each entry\n        if (type === \"department\") {\n            return \"title\";\n        } else if (type === \"employee\") {\n            return \"lname\";\n        }\n    }\n\n    function DepartmentCell(props) { //helper fuction used in table body\n        if (props.type === \"employee\") {\n            return (\n                <TableCell component=\"th\" scope=\"row\">\n                    {capitalize(props.entry.department.title)}\n                </TableCell >\n            );\n        } else {\n            return null;\n        }\n    }\n\n    function TableForms(props) {\n        return (\n            <Grid item xs={11} md={8}>\n                <Form causeUpdate={causeUpdate} type=\"department\" text=\"Add a new Department:\" />\n                <Form causeUpdate={causeUpdate} type=\"employee\" text=\"Add a new Employee:\" />\n            </Grid>\n        );\n    }\n\n    function TableMain(props) {\n        let type = props.type;\n        let keys = props.keys;\n        const departmentIndex = keys.indexOf(\"department\");\n        if (departmentIndex !== -1) keys.splice(departmentIndex, 1); //cant add entire object to a cell!\n\n        if (props.data.map) {\n            return (\n                <TableBody>\n                    {\n                        props.data.map((entry) => (\n                            <TableRow key={entry[selectPrimaryKey(type)]}>\n                                {/* every row starts with the entry's \"primary key\" */}\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {capitalize(entry[selectPrimaryKey(type)])}\n                                </TableCell >\n                                { //map the rest of the properties\n                                    keys.map((key) =>\n                                        <TableCell align=\"right\">{capitalize(entry[key])}</TableCell>\n                                    )\n                                }\n                                { /*if employee, add department which needs special handling*/}\n                                <DepartmentCell type={type} entry={entry} />\n                            </TableRow >\n                        ))\n                    }\n                </TableBody>\n            );\n        }\n        return null;\n    }\n\n    function getTrimmedKeys(data, type) {\n        let keys = [];\n        if (data[0]) { //defensive\n            keys = Object.keys(data[0]); //get the keys of the data object\n            const idIndex = keys.indexOf(\"id\");\n            if (idIndex !== -1) keys.splice(idIndex, 1); //remove db id key\n            const primaryIndex = keys.indexOf(selectPrimaryKey(type));\n            if (primaryIndex !== -1) keys.splice(primaryIndex, 1); //remove title or name, those are handled with conditionals  \n        }\n        return keys;\n    }\n\n    function guessType(data) { //infer type from data\n        if (data[0]) {\n            let d = data[0];\n            if (d.title) {\n                return \"department\";\n            } else if (d.lname) {\n                return \"employee\";\n            }\n        }\n        return null;\n    }\n\n    return (\n        <div className=\"DataTable\">\n            {/* use grid to make responsive */}\n            <Grid container direction=\"column\" alignItems=\"center\">\n                <TableForms />\n                <hr />\n                <Grid item xs={10} md={6}>\n                    <p>Our Data Table for {type + \"s\"}:</p>\n                    <TableContainer component={Paper}>\n                        <Table aria-label=\"simple table\">\n                            {/* split the table in 2 parts for readability */}\n                            <TableHeader type={type} keys={keys} />\n                            <TableMain type={type} data={data} keys={keys} />\n                        </Table>\n                    </TableContainer >\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Box } from '@material-ui/core';\n\nexport default function Title(props) {\n    return (\n        <Box fontSize={30}>\n            <h1>{props.text}</h1>\n        </Box>\n    );\n}\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Work from '@material-ui/icons/Work';\nimport AccountBox from '@material-ui/icons/AccountBox';\nimport './Navbar.css'\n\nexport default function Navbar(props) {\n\n    return (\n        <div className=\"Navbar\">\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <IconButton title=\"Menu\" edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        <a title=\"CompanyApp\" href=\"/\">CompanyApp<sup>TM</sup></a>\n                    </Typography>\n                    {/* shoots anything below toward the right of the navbar */}\n                    <div className=\"grow\" />\n                    <IconButton title=\"Departments\" edge=\"end\" onClick={() => props.setRequestType(\"department\")} color=\"inherit\" aria-label=\"menu\">\n                        <Work />\n                    </IconButton>\n                    <IconButton title=\"Employees\" edge=\"end\" onClick={() => props.setRequestType(\"employee\")} color=\"inherit\" aria-label=\"menu\">\n                        <AccountBox />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport DataTable from './DataTable';\nimport Title from './Title';\nimport Navbar from './Navbar';\n\nexport default function App() {\n\n  const [data, setData] = useState([]);\n  const [requestType, setRequestType] = useState(\"employee\");\n  const [dirty, setDirty] = useState(false);\n\n  async function updateData(t) {\n    await fetch(\"/api/\" + t + \"s\")\n      .then((res) => res.json())\n      .then((res) => {\n        setData(res);\n        setDirty(false);\n      },\n        (err) => console.log(err));\n  }\n\n  useEffect(() => {\n    updateData(requestType);\n  }, [requestType, dirty]);\n\n  if (data) {\n    return (\n      <div className=\"App\">\n        <Navbar setRequestType={setRequestType} />\n        <Title text=\"Welcome to the Company Website\" />\n        <DataTable causeUpdate={() => { setDirty(true); }} data={data} />\n      </div>\n    );\n  }\n  return <p>Loading...</p>;\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}